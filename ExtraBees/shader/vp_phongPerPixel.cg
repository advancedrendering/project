// OpenGL input
struct vertexIN
{
  float4 position	: POSITION;
  float3 normal		: NORMAL;
  float2 decalCoords : TEXCOORD0;
};

// vertex program output
struct vertexOUT
{
  float4 cameraSpacePos : POSITION;
  float2 decalCoords : TEXCOORD0;
  float3 objectSpacePos : TEXCOORD1;
  float3 normal   : TEXCOORD2;
  float fogExponent : TEXCOORD3;
};

// OpenGL state
uniform float4x4 ModelViewProjection : state.matrix.mvp;

vertexOUT main(vertexIN vIn, uniform float fogDensity, uniform float fog)
{
  vertexOUT vOut;
  // copy position
  vOut.objectSpacePos = vIn.position.xyz;
  
  // copy Normal
  vOut.normal = vIn.normal;
  
  // project point onto screen
  vOut.cameraSpacePos = mul(ModelViewProjection, vIn.position);
  
  if (fog == 1.0f){
  	//calculate fogDistance (is increasing with distance to camera)
  	float fogDistance = length(vOut.cameraSpacePos.xyz);
  	vOut.fogExponent = fogDistance * fogDensity;
  }
  
  //hand texture coordinates over to fragment processor.
  vOut.decalCoords = vIn.decalCoords;
  
  return vOut;
}

